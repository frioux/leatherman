#!/usr/bin/perl

use strict;
use warnings;

use autodie;

no warnings 'uninitialized';

use JSON::PP;
use File::Basename 'fileparse';

my (%imports, %commands);

my $cmd = q(go list -f '{{$name := .Name}}{{ $import := .ImportPath}}{{$dir := .Dir}}{{range .GoFiles}}{{$name}} {{$import}} {{$dir}}/{{.}}{{"\n"}}{{end}}' ./internal/tool/...);

for my $line (`$cmd`) {
   chomp $line;

   my ($name, $import, $file) = split /\s+/, $line;

   $imports{$import} = 1;

   my $ast = decode_json(`goblin -file $file`);
   my ($basename) = fileparse($file, ".go");

   %commands = (
      %commands,
      map { $basename => "$name.$_->{name}{value}" }
      grep {
              $_->{type} eq 'function' &&
              $_->{name}{value} =~ m/^[A-Z]/ # public functions
      }
      @{$ast->{declarations}}
   );
}

open my $fh, '>', 'dispatch.go';

print $fh <<'GOLANG';
// Code generated by maint/generate-dispatch. DO NOT EDIT.

package main

import (
	"io"

GOLANG

print $fh qq(\t"$_"\n) for sort keys %imports;

print $fh <<'GOLANG';
)

func init() {
	Dispatch = map[string]func([]string, io.Reader) error{
GOLANG

print $fh qq(\t\t"$_": $commands{$_},\n) for sort keys %commands;

print $fh <<'GOLANG';

		"help":    Help,
		"version": Version,
		"explode": Explode,
	}
}
GOLANG

close $fh;

system 'go', 'fmt';
