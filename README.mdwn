# Leatherman - fREW's favorite multitool

This is a little project simply to make trivial tools in Go effortless for my
personal usage.  These tools are almost surely of low utility to most people,
but may be instructive nonetheless.

Currently code quality is of low importance, and getting the tools ported from
Perl and Python is higher priority.  Anything that uses non-core modules is a
higher priority.  Anything that needs concurency is also of higher priority.

The intended flow for this is that tools will be functions that get added to the
`dispatch` table in `main`.  Eventually I will factor things into separate
packages, but not yet.  [I have CI/CD to build this into a single
binary](https://github.com/frioux/leatherman/blob/master/.travis.yml) and [an
`explode` tool that builds
symlinks](https://github.com/frioux/leatherman/blob/master/explode.go) for each
tool in the busybox style.

[I have add automation in my
dotfiles](https://github.com/frioux/dotfiles/blob/bef8303c19e2cefac7dfbec420ad8d45b95415b8/install.sh#L133-L141)
to pull the latest binary at install time and run the `explode` tool.

## Installation

Here's a copy pasteable script to install the leatherman:

``` bash
LMURL="$(curl -s https://api.github.com/repos/frioux/leatherman/releases/latest |
   grep browser_download_url |
   cut -d '"' -f 4)"
mkdir -p ~/bin
curl -sL "$LMURL" > ~/bin/leatherman.xz
xz -d -f ~/bin/leatherman.xz
chmod +x ~/bin/leatherman
~/bin/leatherman explode
```

This asssumes that `~/bin` is in your path.  The `explode` command will create a
symlink for each of the tools listed below.

## Usage

Each tool takes different args, but to run a tool you can either use a symlink
(presumably created by `explode`):

``` bash
$ echo "---\nfoo: 1" | yaml2json
{"foo":1}
```

or use it as a subcommand:

``` bash
echo "---\nfoo: 1" | leatherman yaml2json
{"foo":1}
```

## Current tools

### `addrs`

``` bash
$ <someaddrs.txt addrs "$HOME/mail/gmail.sent/cur/*" >sortedaddrs.txt
```

Reads emails (in the mutt addrbook format, see below) on stdin and sorts them
based on when they were most recently sent to.

### `addrspec-to-tabs`

Converts email addresses from the standard format (`"Hello Friend" <foo@bar>`)
to the mutt (?) address book format, ie tab separated fields.

Note that this new version ignores the comment because, after actually auditing
my addressbook, most comments are incorrectly recognized by all tools. (for
example: `<5555555555@vzw.com> (555) 555-5555` should not have a comment of
`(555)`.)

### `clocks`

My personal, digital, wall of clocks.

### `csv2json`

Reads CSV on stdin and writes JSON on stdout; first line of input is the header,
and thus the keys of the JSON.

### `debounce`

Powerful tool for debouncing lines of input.

### `ec2-resource-for-ip`

Pass IPs as arguments and this will find them in EC2 (and other places in AWS.)

### `expand-url`

Reads text on STDIN and writes the same text back, converting any links to
Markdown links, with the title of the page as the title of the link.  If you set
`MOZ_COOKIEJAR` to the path of your `cookies.sqlite` it will use those cookies
when loading the page.

### `export-bamboohr`

Exports entire company directory as JSON.

### `export-bamboohr-tree`

Exports company org chart as JSON.

### `fn`

Create persistent functions by actually writing scripts.  Example usage:

```
fn count-users 'wc -l < /etc/passwd'
```

### `gen-pass`

Little tool for generating bcrypt hashes.

### `group-by-date`

Creates time series data by counting lines and grouping them by a given date
format.

### `netrc-password`

Pass hostname and login and this will print the password for the account.

### `pomotimer`

```
pomotimer 2.5m
```

or

```
pomotimer 3m12s
```

Originally a timer for use with [the pomodoro][1] [technique][2].  Handy timer in any case
since you can pass it arbitrary durations, pause it, reset it, and see it's
progress.

[1]: https://blog.afoolishmanifesto.com/posts/the-pomodoro-technique/
[2]: https://blog.afoolishmanifesto.com/posts/the-pomodoro-technique-three-years-later/

### `prepend-emoji-hist`

```
alluni.pl | prefix-emoji-hist ~/.uni_history
```

Prints out the deduplicated lines from the passed file, converting characters to
unicode names, and then printing out the lines from STDIN, filtering out what's
already been printed.  Note that `alluni.pl` is in [my
dotfiles](https://github.com/frioux/dotfiles.)

### `render-mail`

Ghetto tool to render email with a Local-Date included, if Date is not already
in local time.

### `replace-unzip`

Extracts zipfiles, but does not extract `.DS_Store` or `__MACOSX/`.
Automatically extracts into a directory named after the zipfile if there is not
a single root for all files in the zipfile.

### `ssh-quote`

Prepares the arguments such that they can be pasted into an ssh command safely.
For example:

```bash
$ ssh-quote ls 'f*f'
'sh -c '\''ls '\''\'"''"'f*f'\''\'\'
```

### `yaml2json`

Reads YAML on stdin and writes JSON on stdout.

